{"version":3,"file":"ngx-doc-viewer.js","sources":["../../modules/document-viewer.component.ts","../../modules/document-viewer.module.ts","../../modules/ngx-doc-viewer.ts"],"sourcesContent":["import { Component, Input, NgZone, OnDestroy, OnChanges, SimpleChanges, Output, ViewChildren, QueryList, ElementRef } from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { take } from 'rxjs/operators';\r\nimport { Subscription, interval, timer } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\ndeclare var mammoth;\r\n\r\nexport type viewerType = 'google' | 'office' | 'mammoth' | 'pdf' | 'url';\r\n@Component({\r\n    // tslint:disable-next-line: component-selector\r\n    selector: 'ngx-doc-viewer',\r\n    templateUrl: 'document-viewer.component.html',\r\n    styles: [`:host {\r\n        display: block;\r\n    }\r\n    .container {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n    }\r\n    .overlay-popout-google {\r\n        width: 55px;\r\n        height: 55px;\r\n        right: 0px;\r\n        top: 9.5px;\r\n        position: absolute;\r\n        z-index: 1000;\r\n    }\r\n    .overlay-popout-office {\r\n        width: 115px;\r\n        height: 25px;\r\n        right: 0;\r\n        bottom: 0;\r\n        position: absolute;\r\n        z-index: 1000;\r\n    }\r\n    .overlay-full {\r\n        width: 100%;\r\n        height: 100%;\r\n        right: 0;\r\n        top: 0;\r\n        position: absolute;\r\n        z-index: 1000;\r\n    }\r\n    iframe {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n    `]\r\n})\r\nexport class NgxDocViewerComponent implements OnChanges, OnDestroy {\r\n    public fullUrl: SafeResourceUrl = null;\r\n    public externalViewer = false;\r\n    public docHtml = '';\r\n    public configuredViewer: viewerType = 'google';\r\n    private checkIFrameSubscription: Subscription = null;\r\n\r\n    constructor(private domSanitizer: DomSanitizer, private ngZone: NgZone) { }\r\n    @Output() loaded: EventEmitter<any> = new EventEmitter();\r\n    @Input() url = '';\r\n    @Input() queryParams = '';\r\n    @Input() viewerUrl = '';\r\n    @Input() googleCheckInterval = 3000;\r\n    @Input() disableContent: 'none' | 'all' | 'popout' | 'popout-hide' = 'none';\r\n    @Input() googleCheckContentLoaded = true;\r\n    @Input() viewer: viewerType;\r\n    @ViewChildren('iframe') iframes: QueryList<ElementRef>;\r\n    ngOnDestroy(): void {\r\n        if (this.checkIFrameSubscription) {\r\n            this.checkIFrameSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    async ngOnChanges(changes: SimpleChanges): Promise<void> {\r\n        if (changes && changes.viewer && (changes.viewer.isFirstChange || changes.viewer.currentValue !== changes.viewer.previousValue)) {\r\n            if (this.viewer !== 'google' && this.viewer !== 'office' &&\r\n                this.viewer !== 'mammoth' && this.viewer !== 'pdf' && this.viewer !== 'url') {\r\n                console.error(`Unsupported viewer: '${this.viewer}'. Supported viewers: google, office, mammoth and pdf`);\r\n            }\r\n            if (this.viewer === 'mammoth') {\r\n                if (mammoth === null) {\r\n                    console.error('please install mammoth when using local viewer');\r\n                }\r\n            }\r\n            this.configuredViewer = this.viewer;\r\n        }\r\n        if (this.disableContent !== 'none' && this.viewer !== 'google') {\r\n\r\n        }\r\n        if ((changes.url && changes.url.currentValue !== changes.url.previousValue) ||\r\n            changes.viewer && changes.viewer.currentValue !== changes.viewer.previousValue ||\r\n            changes.viewerUrl && changes.viewerUrl.currentValue !== changes.viewerUrl.previousValue) {\r\n            if (!changes.viewerUrl) {\r\n                this.viewerUrl = null;\r\n            }\r\n            switch (this.configuredViewer) {\r\n                case 'google':\r\n                    this.viewerUrl = `https://docs.google.com/gview?url=%URL%&embedded=true`;\r\n                    break;\r\n                case 'office': {\r\n                    this.viewerUrl = `https://view.officeapps.live.com/op/embed.aspx?src=%URL%`;\r\n                    break;\r\n                }\r\n                case 'pdf': {\r\n                    this.viewerUrl = null;\r\n                    break;\r\n                }\r\n            }\r\n            this.docHtml = '';\r\n            this.externalViewer = this.configuredViewer === 'google' || this.configuredViewer === 'office' || this.configuredViewer === 'url';\r\n            if (this.checkIFrameSubscription) {\r\n                this.checkIFrameSubscription.unsubscribe();\r\n            }\r\n            if (!this.url) {\r\n                this.fullUrl = null;\r\n            } else if (this.configuredViewer === 'office' || this.configuredViewer === 'google'\r\n                || this.configuredViewer === 'pdf' || this.configuredViewer === 'url') {\r\n                const u = this.url.indexOf('/') ? encodeURIComponent(this.url) : this.url;\r\n                let url = this.viewerUrl ? this.viewerUrl.replace('%URL%', u) : this.url;\r\n                if (!!this.queryParams && this.configuredViewer !== 'pdf') {\r\n                    const start = this.queryParams.startsWith('&') ? '' : '&';\r\n                    url = `${url}${start}${this.queryParams}`;\r\n                }\r\n                this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(url);\r\n                // see:\r\n                // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives\r\n                // hack to reload iframe if it's not loaded.\r\n                // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.\r\n                if (this.configuredViewer === 'google' && this.googleCheckContentLoaded) {\r\n                    this.ngZone.runOutsideAngular(() => {\r\n                        // if it's not loaded after the googleIntervalCheck, then open load again.\r\n                        this.checkIFrameSubscription = timer(100, this.googleCheckInterval)\r\n                            .pipe(\r\n                                take(Math.round(this.googleCheckInterval === 0 ? 0 : 20000 / this.googleCheckInterval)))\r\n                            .subscribe(() => {\r\n                                const iframe = this.iframes?.first?.nativeElement;\r\n                                this.reloadIFrame(iframe);\r\n                            });\r\n                    });\r\n                }\r\n            } else if (this.configuredViewer === 'mammoth') {\r\n                if (!mammoth) {\r\n                    console.error('Please install mammoth and make sure mammoth.browser.min.js is loaded.');\r\n                }\r\n                this.docHtml = await this.getDocxToHtml(this.url);\r\n            }\r\n        }\r\n    }\r\n\r\n    iframeLoaded() {\r\n        this.loaded.emit(null);\r\n        if (this.checkIFrameSubscription) {\r\n            this.checkIFrameSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    reloadIFrame(iframe: HTMLIFrameElement) {\r\n        if (iframe) {\r\n            console.log('reloading..');\r\n            iframe.src = iframe.src;\r\n        }\r\n    }\r\n\r\n    private async getDocxToHtml(url: string) {\r\n        const arrayBuffer = await this.fileToArray(url);\r\n        const resultObject = await mammoth.convertToHtml({ arrayBuffer });\r\n        return resultObject.value;\r\n    }\r\n\r\n    private fileToArray(url: string): Promise<ArrayBuffer> {\r\n        return new Promise<ArrayBuffer>((resolve, reject) => {\r\n            try {\r\n                const request = new XMLHttpRequest();\r\n                request.open('GET', url, true);\r\n                request.responseType = 'blob';\r\n                request.onload = () => {\r\n                    const reader = new FileReader();\r\n                    reader.readAsArrayBuffer(request.response);\r\n                    reader.onloadend = (e) => {\r\n                        resolve(reader.result as ArrayBuffer);\r\n                    };\r\n                };\r\n                request.send();\r\n            } catch {\r\n                reject(`error while retrieving file ${url}.`);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { NgxDocViewerComponent } from './document-viewer.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [NgxDocViewerComponent],\r\n    exports: [NgxDocViewerComponent]\r\n})\r\nexport class NgxDocViewerModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}